// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ChatBot
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import ChatBot
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public protocol ChatBotDelegate : AnyObject {
  func chatBotDidClose(showPaywall: Swift.Bool)
}
public class ChatBotManager {
  weak public var delegate: (any ChatBot.ChatBotDelegate)?
  public init()
  public func createChatBotController(with configuration: ChatBot.ChatBotConfiguration) -> UIKit.UIViewController
  @objc deinit
}
public protocol ReusableView : AnyObject {
}
extension ChatBot.ReusableView {
  public static var reuseIdentifier: Swift.String {
    get
  }
}
public enum LocalizedStrings {
  public enum SelectionScreen {
  }
  public enum Bot {
    public static let donaldBotName: Swift.String
    public static let donaldBotDescription: Swift.String
    public static let rubyBotName: Swift.String
    public static let rubyBotDescription: Swift.String
  }
  public enum Alert {
  }
  public enum ChatScreen {
    public static let textViewPlaceholder: Swift.String
  }
  public enum PrivacyPolicyScreen {
    public static let privacyPolicyControllerTitle: Swift.String
    public static let privacyPolicyDoneButtonTitle: Swift.String
  }
  public enum Toast {
  }
  public enum ActionScreen {
  }
  public enum Footer {
  }
}
public protocol ChatBotAnimatableViewFactory {
  func makeChatBotAnimatableView() -> any ChatBot.ChatBotAnimatableView
}
public protocol NibLoadable : AnyObject {
  static var nib: UIKit.UINib { get }
}
extension ChatBot.NibLoadable {
  public static var nib: UIKit.UINib {
    get
  }
}
extension ChatBot.NibLoadable where Self : UIKit.UIView {
  public static func loadFromNib() -> Self
}
public protocol ChatBotAnimatableView : UIKit.UIView {
  func startAnimation()
  func stopAnimation()
}
public struct ChatBotConfiguration {
  public init(privacyPolicyUrl: Swift.String, authHeaderName: Swift.String, authHeaderValue: Swift.String, headerUserPremiumValue: Swift.String, requestStartUrl: Swift.String, requestHistoryUrl: Swift.String, requestSendMessageUrl: Swift.String, requestCheckOptInUrl: Swift.String, requestPostOptInUrl: Swift.String, requestClearHistoryUrl: Swift.String, userImage: UIKit.UIImage, byPassLimits: Swift.Bool, useLightTheme: Swift.Bool, chatBotAnimatableViewFactory: any ChatBot.ChatBotAnimatableViewFactory)
}
